@page "/fetchdata"
@inject HttpClient httpClient
@using MessagePack
@using MessagePack.Resolvers

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null) {
    <p><em>Loading...</em></p>
}
else {
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts) {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}
<p>@prompt</p>

@code {
    WeatherForecast[] forecasts;

    string prompt;

    protected override async Task OnInitializedAsync()
    {
        try {
            var result = await httpClient.GetAsync("api/WeatherForecast");
            var bytes = await result.Content.ReadAsByteArrayAsync();
            var data = MessagePackSerializer.Deserialize<List<WeatherForecast>>(bytes, ContractlessStandardResolver.Options);

            forecasts = data.ToArray();
        }
        catch (Exception exception) {
            prompt = "Exception" + exception.Message;
        }
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
        public string Summary { get; set; }
    }
}
